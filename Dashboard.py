{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyPvLfORUJpgzhihaE+8Zjwv",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/GonzaloPosse/Proyecto_Grupal_Grupo05/blob/main/Dashboard.py\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Script para la creación del Dashboard"
      ],
      "metadata": {
        "id": "jYNDg6rRa5f4"
      }
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "93BinkuI76io"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "%%writefile app.py\n",
        "import streamlit as st\n",
        "from PIL import Image\n",
        "import plotly.figure_factory as ff\n",
        "import numpy as np\n",
        "import plotly.express as px\n",
        "import pandas as pd\n",
        "from sqlalchemy import create_engine\n",
        "import plotly.graph_objects as go\n",
        "import folium\n",
        "\n",
        "conexion= create_engine('postgresql://{user}:{pw}@{host}:{port}/{db}'.format(\n",
        "    user='postgres', pw='postgres', host='database-grupo5.cgmzd7suyc4v.us-east-1.rds.amazonaws.com',port='5432',db='postgres', echo=False))\n",
        "\n",
        "\n",
        "st.set_page_config(page_title='Equipo 5 - Henry')\n",
        "st.title('Proyecto Grupal - Equipo 5')\n",
        "\n",
        "paises = pd.read_sql_query('SELECT * FROM \"Paises\"',con=conexion)\n",
        "anos = pd.read_sql_query('SELECT * FROM \"Años\"' ,con=conexion)\n",
        "emisiones_sin_año = pd.read_sql_query ('SELECT * FROM \"Emisiones_CO2\"',con=conexion)\n",
        "nuclear_sin_año = pd.read_sql_query ('SELECT * FROM \"Energia_nuclear\"',con=conexion)\n",
        "eolica_sin_año = pd.read_sql_query ('SELECT * FROM \"Energia_nuclear\"',con=conexion)\n",
        "geotermica_sin_año = pd.read_sql_query ('SELECT * FROM \"Energia_Geotermica\"',con=conexion)\n",
        "solar_sin_año = pd.read_sql_query ('SELECT * FROM \"Energia_solar\"',con=conexion)\n",
        "Energias_Renovables_Fer = pd.read_sql_query ('SELECT * FROM \"Energias_Renovables_Fer\"',con=conexion)\n",
        "er_fer = pd.read_sql_query ('SELECT * FROM \"er_fer\"',con=conexion)\n",
        "# Javi # Javi # Javi # Javi # Javi # Javi # Javi # Javi # Javi # Javi # Javi # Javi # Javi # Javi # Javi # Javi # Javi # Javi  \n",
        "\n",
        "df_paises_j = pd.read_sql_query('SELECT * FROM \"Paises\"',con=conexion)\n",
        "df_Años_j = pd.read_sql_query('SELECT * FROM \"Años\"',con=conexion)\n",
        "df_emisiones_CO2_j = pd.read_sql_query('SELECT * FROM \"Emisiones_CO2\"',con=conexion)\n",
        "df_poblacion_j = pd.read_sql_query('SELECT * FROM \"Poblacion_Mundo\"',con=conexion)\n",
        "df_consumo = pd.read_sql_query('SELECT * FROM \"Energia_total\"',con=conexion)\n",
        "df_poblacion_j = df_poblacion_j.rename(columns={'Id_Anio':'Id_anio'})\n",
        "\n",
        "df = df_emisiones_CO2_j.merge(df_poblacion_j, on=['Id_Pais','Id_anio'], how='left').dropna()\n",
        "df = df.merge(df_consumo, on=['Id_Pais','Id_anio'], how='left').dropna()\n",
        "df = df.merge(df_paises_j, on='Id_Pais', how='left')\n",
        "df = df.merge(df_Años_j, on='Id_anio', how='left')\n",
        "df = df.drop(columns=['ID_Emisiones_CO2','Id_Pais','Id_anio','Id_Poblacion','ID_consumototal'])\n",
        "df = df.reindex(columns=['Codigo_pais','Pais','Anio','Poblacion','Emisiones_CO2','Consumo_total'])\n",
        "df = df.rename(columns={'Pais':'País','Anio':'Año','Emisiones_CO2':'Emisiones CO2','Consumo_total':'Consumo Energía','Poblacion':'Población'})\n",
        "\n",
        "\n",
        "# MAPA DE EMISIONES HISTORICAS\n",
        "\n",
        "min_value = df['Emisiones CO2'].min()\n",
        "max_value = df['Emisiones CO2'].max()\n",
        "fig = px.choropleth(df, locations=\"Codigo_pais\",\n",
        "                    color=\"Emisiones CO2\",\n",
        "                    locationmode=\"ISO-3\",\n",
        "                    animation_frame='Año',\n",
        "                    color_continuous_midpoint = 3,\n",
        "color_continuous_scale=px.colors.sequential.thermal_r,\n",
        "range_color=(min_value,max_value))\n",
        "fig.update_layout(width=800, height=500, title_text = 'Emisiones históricas de CO2',font_size=14)\n",
        "st.plotly_chart(fig)\n",
        "\n",
        "\n",
        "# GRAFICA DE BURBUJAS CONSUMO, EMISIONES Y POBLACION\n",
        "\n",
        "fig = px.scatter(df, x='Emisiones CO2', y='Consumo Energía', animation_frame='Año', animation_group='País',\n",
        "           size='Población', color='País', hover_name='País',\n",
        "           log_x=True, size_max=55, range_x=[10,30000], range_y=[-40,250], labels={\n",
        "                     \"Emisiones CO2\": \"Emisiones CO2 (Mt)\",\n",
        "                     \"Consumo Energía\": \"Consumo Energía (EJ)\",\n",
        "                 },title=\"Emisiones CO2 VS Consumo de Energía\")\n",
        "fig.update_layout(width=800, height=500, title_text = 'Emisiones CO2 VS Consumo de Energía',font_size=14)\n",
        "st.plotly_chart(fig)\n",
        "\n",
        "\n",
        "# GRAFICA DE BARRAS PAISES QUE MAS CONTAMINAN\n",
        "\n",
        "df1 = df.groupby(by=['País'], as_index=False).sum().sort_values('Emisiones CO2', ascending=False).drop(columns='Año').reset_index()\n",
        "df1 = df1.loc[(df1['País'] != 'Other South America (BP)') & (df1['País'] != 'Other CIS (BP)'), :]\n",
        "max_contaminantes = df1.head(10)\n",
        "min_contaminantes = df1.tail(10)\n",
        "\n",
        "graf_peores_pc=px.bar( data_frame=max_contaminantes,\n",
        "                    x=\"País\", \n",
        "                    y=\"Emisiones CO2\", \n",
        "                    title=\"Países con mayor cantidad acumulada de Emisiones de CO2\",\n",
        "                    color_discrete_sequence=[\"red\"],\n",
        "                    opacity=0.8\n",
        "        )\n",
        "st.plotly_chart(graf_peores_pc)\n",
        "\n",
        "  \n",
        "\n",
        "\n",
        "# GRAFICA DE BARRAS PAISES QUE MENOS CONTAMINAN\n",
        "\n",
        "graf_mejores_pc=px.bar( data_frame=min_contaminantes,\n",
        "                    x=\"País\", \n",
        "                    y=\"Emisiones CO2\", \n",
        "                    title=\"Países con menor cantidad acumulada de Emisiones de CO2\",\n",
        "                    color_discrete_sequence=[\"green\"],\n",
        "                    opacity=0.8\n",
        "        )\n",
        "st.plotly_chart(graf_mejores_pc)\n",
        "\n",
        "# Kari  # Kari # Kari  # Kari # Kari  # Kari # Kari  # Kari # Kari  # Kari # Kari  # Kari # Kari  # Kari # Kari  # Kari\n",
        "#GRAFICA QUE MUESTRA INCREMENTO DE EMISIONES CO2 ANUALES EN PORCENTAJE\n",
        "emisionesk = pd.read_sql_query('SELECT *FROM \"Emisiones_CO2\";', con=conexion)\n",
        "paisesk = pd.read_sql_query('SELECT *FROM \"Paises\";', con=conexion)\n",
        "añosk = pd.read_sql_query('SELECT *FROM \"Años\";', con=conexion)\n",
        "emisiones80k=pd.merge(emisionesk,paisesk,on='Id_Pais')\n",
        "emisiones80k=pd.merge(emisiones80k,añosk,on='Id_anio')\n",
        "emisiones80k.drop(columns={'Id_Pais','Id_anio'}, inplace=True)\n",
        "emisiones_añok=emisiones80k.groupby(by=['Anio']).mean()\n",
        "emisiones_añok['Variacion']=(emisiones_añok['Emisiones_CO2'].pct_change())*100\n",
        "k_fig = go.Figure()\n",
        "k_fig.add_trace(go.Scatter(x=emisiones_añok.index, y=emisiones_añok['Variacion'],\n",
        "                    mode='lines'\n",
        "                     ))\n",
        "k_fig.update_layout(title='Porcentaje de incremento de Emisiones CO2 en el mundo por año de  1990 a 2021',\n",
        "                   xaxis_title='Año',\n",
        "                   yaxis_title='Porcentaje de incremento')\n",
        "st.plotly_chart(k_fig, use_container_width=True)\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "# Gonza # Gonza # Gonza # Gonza # Gonza # Gonza # Gonza # Gonza # Gonza # Gonza # Gonza # Gonza # Gonza # Gonza # Gonza # Gonza\n",
        "query = 'SELECT an.\"Anio\", pa.\"Pais\", (enp.\"Consumo_Petroleo\" + enc.\"Consumo_Carbon\" + eng.\"Consumo_gas\") as \"Consumo total combustible fosiles\" FROM \"Energia_petroleo\" enp JOIN \"Energia_Carbon\" enc ON enp.\"Id_Pais\" = enc.\"Id_Pais\" AND enp.\"Id_anio\" = enc.\"Id_Anio\" JOIN \"Gas_Natural\" eng ON enp.\"Id_Pais\" = eng.\"Id_Pais\" AND enp.\"Id_anio\" = eng.\"Id_anio\" JOIN \"Paises\" pa ON enp.\"Id_Pais\" = pa.\"Id_Pais\" JOIN \"Años\" an ON enp.\"Id_anio\"=an.\"Id_anio\";'\n",
        "conexion = create_engine(\"postgresql://{user}:{pw}@{host}:{port}/{db}\"\n",
        "                         .format(user=\"postgres\",\n",
        "                                 pw=\"postgres\",\n",
        "                                 host=\"database-grupo5.cgmzd7suyc4v.us-east-1.rds.amazonaws.com\",\n",
        "                                 port=\"5432\",\n",
        "                                 db=\"postgres\",\n",
        "                                 echo=False))\n",
        "if conexion.connect():\n",
        "  print(\"conexion exitosa\")\n",
        "df_gonza = pd.read_sql_query(query, con=conexion)\n",
        "\n",
        "df_gonza['Consumo total combustible fosiles'] = round(df_gonza['Consumo total combustible fosiles'], 2)\n",
        "\n",
        "df_2020_gonza = df_gonza[df_gonza['Anio'] == 2020]\n",
        "df_2020_gonza = df_2020_gonza.sort_values(by='Consumo total combustible fosiles', ascending=False)\n",
        "\n",
        "fig_gonza1 = px.bar(df_2020_gonza.head(7), y='Consumo total combustible fosiles',x='Pais', text_auto='.2s', \n",
        "                title='Consumo de combustibles fosiles en el año 2020')\n",
        "\n",
        "st.plotly_chart(fig_gonza1)\n",
        "\n",
        "fig_gonza2 = px.bar(df_gonza[df_gonza['Consumo total combustible fosiles']> 13], x='Anio', y='Consumo total combustible fosiles',\n",
        "            color='Pais', text='Pais', title='Evolucion a traves del tiempo')\n",
        "st.plotly_chart(fig_gonza2)\n",
        "\n",
        "df_mayores_gonza = df_gonza.groupby('Pais')['Consumo total combustible fosiles'].sum()\n",
        "df_mayores_gonza = df_mayores_gonza.sort_values(ascending=False)\n",
        "fig_gonza3 = px.bar(df_mayores_gonza.head(7), text_auto='.2s', \n",
        "                title='Consumo de combustibles fosiles total por pais. (1985-2020)')\n",
        "st.plotly_chart(fig_gonza3)\n",
        "\n",
        "\n",
        "\n",
        " # Fer  # Fer  # Fer  # Fer  # Fer  # Fer  # Fer  # Fer  # Fer  # Fer  # Fer  # Fer  # Fer \n",
        "\n",
        "Energias_Renovables_Fer = Energias_Renovables_Fer.sort_values(by='Anio', ascending=True)\n",
        "min_value = Energias_Renovables_Fer['Total_Produccion'].min()\n",
        "max_value = Energias_Renovables_Fer['Total_Produccion'].max()\n",
        "fig3 = px.choropleth(Energias_Renovables_Fer, locations=\"Codigo_pais\",\n",
        "                    color=\"Total_Produccion\",\n",
        "                    animation_frame='Anio', labels={\n",
        "                     \"Anio\":\"Año\",\"Total_Produccion\":\"Produccion Total\"},\n",
        "                    color_continuous_midpoint = 3,\n",
        "color_continuous_scale=px.colors.sequential.thermal_r,\n",
        "range_color=(min_value,max_value))\n",
        "fig3.update_layout(width=800, height=500, title_text = 'Produccion Total de Energías Renovables (TWh)', font_size=14)\n",
        "st.plotly_chart(fig3)\n",
        "\n",
        "\n",
        "df1 = Energias_Renovables_Fer[Energias_Renovables_Fer['Total_Produccion']>=201.1]\n",
        "df1 = df1.sort_values(by=\"Total_Produccion\", ascending=False)\n",
        "fig1=px.bar(df1, x='Anio', y='Total_Produccion', color='Pais',labels={\n",
        "                     \"Pais\": \"País\"})\n",
        "fig1.update_layout( xaxis_title='Año',\n",
        "                   yaxis_title='Producción Total (TWh)', \n",
        "                   title_text = 'Paises con Mayor Producción de Energías Renovables',\n",
        "                   font_size=14)\n",
        "st.plotly_chart(fig1, use_container_width=True)\n",
        "\n",
        "df3 = er_fer[er_fer['Total_Produccion']<=10]\n",
        "df3 = df3.sort_values(by=\"Total_Produccion\", ascending=False)\n",
        "fig4=px.bar(df3, x='Anio', y='Total_Produccion', color='Pais',labels={\n",
        "                     \"Pais\": \"País\"})\n",
        "fig4.update_layout( xaxis_title='Año',\n",
        "                   yaxis_title='Producción Total (TWh)', \n",
        "                   title_text = 'Paises con Menor Producción de Energías Renovables',\n",
        "                   font_size=14)\n",
        "st.plotly_chart(fig4, use_container_width=True)\n",
        "\n",
        "\n",
        "\n",
        "\n",
        " # Franco # Franco # Franco # Franco # Franco # Franco # Franco # Franco # Franco # Franco # Franco # Franco # Franco # Franco # Franco # Franco\n",
        "\n",
        "\n",
        "queryFranco='SELECT a.\"Anio\", pa.\"Pais\", pa.\"Codigo_pais\", (er.\"Consumo_renovables\"+en.\"Consumo_Nuclear\")/et.\"Consumo_total\" as \"Energia_Limpia\" FROM \"Energia_renovables\" er JOIN \"Energia_nuclear_con_ceros\" en ON  er.\"Id_Pais\" = en.\"Id_Pais\" AND er.\"Id_anio\" = en.\"Id_anio\" JOIN \"Energia_total\" et ON er.\"Id_Pais\" = et.\"Id_Pais\" AND er.\"Id_anio\" = et.\"Id_anio\" JOIN \"Paises\" pa ON er.\"Id_Pais\" = pa.\"Id_Pais\" JOIN \"Años\" a ON er.\"Id_anio\"=a.\"Id_anio\";'\n",
        "FR_Energias_limpias = pd.read_sql_query(queryFranco, con=conexion)\n",
        "FR_Energias_limpias.drop(FR_Energias_limpias[FR_Energias_limpias.Pais == \"Other CIS (BP)\"].index, inplace=True)\n",
        "FR_Energias_limpias.drop(FR_Energias_limpias[FR_Energias_limpias.Pais == \"Other Northern Africa (BP)\"].index, inplace=True)\n",
        "FR_Energias_limpias.drop(FR_Energias_limpias[FR_Energias_limpias.Pais == \"Other Western Africa (BP)\"].index, inplace=True)\n",
        "FR_Energias_limpias.drop(FR_Energias_limpias[FR_Energias_limpias.Pais == \"Other Asia Pacific (BP)\"].index, inplace=True)\n",
        "FR_Energias_limpias.drop(FR_Energias_limpias[FR_Energias_limpias.Pais == \"Other South America (BP)\"].index, inplace=True)\n",
        "FR_Energias_limpias.drop(FR_Energias_limpias[FR_Energias_limpias.Pais == \"Eastern Africa (BP)\"].index, inplace=True)\n",
        "FR_Energias_limpias.drop(FR_Energias_limpias[FR_Energias_limpias.Pais == \"Other Caribbean (BP)\"].index, inplace=True)\n",
        "FR_Energias_limpias.drop(FR_Energias_limpias[FR_Energias_limpias.Pais == \"Other Europe (BP)\"].index, inplace=True)\n",
        "FR_Energias_limpias.drop(FR_Energias_limpias[FR_Energias_limpias.Pais == \"Other Middle East (BP)\"].index, inplace=True)\n",
        "FR_Energias_limpias.drop(FR_Energias_limpias[FR_Energias_limpias.Pais == \"Other South and Central America (BP)\"].index, inplace=True)\n",
        "\n",
        "FR_Energias_limpias2021 = FR_Energias_limpias[FR_Energias_limpias.Anio == 2021]\n",
        "FR_Energias_limpias2021.sort_values(\"Energia_Limpia\", ascending=True, inplace=True)\n",
        "FR_Energias_limpias2021.reset_index(drop=True, inplace=True)\n",
        "\n",
        "#Creacion de mapa de consumo de energías limpias consumo total\n",
        "\n",
        "data1=dict(type = \"choropleth\", \n",
        " locations = FR_Energias_limpias2021.Codigo_pais, \n",
        " locationmode = \"ISO-3\", \n",
        " z = FR_Energias_limpias2021.Energia_Limpia)\n",
        "\n",
        "layout1 = dict(title = 'Consumo energía limpia / consumo total en 2021', title_x=0.5, geo = {'scope':'world'})\n",
        "FR_x1 = go.Figure(data=[data1],\n",
        "layout = layout1)\n",
        "st.write(FR_x1)\n",
        "\n",
        "#gráficos de barra\n",
        "\n",
        "worst_5_energiaslimpias = FR_Energias_limpias2021[0:5]\n",
        "best_5_energiaslimpias = FR_Energias_limpias2021[-5:]\n",
        "min_medio=int(FR_Energias_limpias2021.shape[0]/2-2)\n",
        "max_medio=int(FR_Energias_limpias2021.shape[0]/2+3)\n",
        "middle_5_energiaslimpias=FR_Energias_limpias2021[min_medio:max_medio]\n",
        "\n",
        "#Peores, gráfico de barras.\n",
        "\n",
        "graf_peores_energialimpia=px.bar( data_frame=worst_5_energiaslimpias,\n",
        "                    x=\"Pais\", \n",
        "                    y=\"Energia_Limpia\", \n",
        "                    title=\"5 países con peor relación Consumo energía limpia / consumo total en 2021\",\n",
        "                    color_discrete_sequence=[\"red\"],\n",
        "                    opacity=0.8\n",
        "        )\n",
        "st.write(graf_peores_energialimpia)\n",
        "\n",
        "#intermedios, gráfico de barras.\n",
        "\n",
        "graf_middle_energialimpia=px.bar( data_frame=middle_5_energiaslimpias,\n",
        "                    x=\"Pais\", \n",
        "                    y=\"Energia_Limpia\", \n",
        "                    title=\"5 países intermedios según relación Consumo energía limpia / consumo total en 2021\",\n",
        "                    color_discrete_sequence=[\"blue\"],\n",
        "                    opacity=0.8\n",
        "        )\n",
        "st.write(graf_middle_energialimpia)\n",
        "\n",
        "#Mejores, gráfico de barras.\n",
        "\n",
        "graf_mejores_energialimpia=px.bar( data_frame=best_5_energiaslimpias,\n",
        "                    x=\"Pais\", \n",
        "                    y=\"Energia_Limpia\", \n",
        "                    title=\"5 países con mejor relación Consumo energía limpia / consumo total en 2021\",\n",
        "                    color_discrete_sequence=[\"green\"],\n",
        "                    opacity=0.8\n",
        "        )\n",
        "st.write(graf_mejores_energialimpia)\n",
        "\n",
        "KPI5=FR_Energias_limpias.pivot(index=\"Pais\",columns=\"Anio\", values=\"Energia_Limpia\")\n",
        "KPI5[\"KPI5\"]=KPI5[2021]-KPI5[2020]\n",
        "tablakpi5=KPI5[KPI5[\"KPI5\"]>=0.01][\"KPI5\"].to_frame()\n",
        "tablakpi5[\"KPI5\"]=tablakpi5[\"KPI5\"]*100\n",
        "tablakpi5[\"KPI5\"]=round(tablakpi5[\"KPI5\"],1)\n",
        "tablakpi5=tablakpi5.sort_values(\"KPI5\", ascending=False)\n",
        "st.write(px.bar(tablakpi5, title=\"Incremento interanual del ratio Consumo Limpio / Consumo Total (2021)\", labels={'x': 'Year', 'value':'Puntos porcentuales'}))\n",
        "\n",
        "\n",
        "paiseskpi5=list(KPI5.index.values)\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.linear_model import LinearRegression\n",
        "from sklearn.metrics import mean_absolute_error, mean_squared_error\n",
        "import numpy as np\n",
        "alfas = {}\n",
        "betas = {}\n",
        "score= {}\n",
        "\n",
        "for pais in paiseskpi5:\n",
        "    seriepais=KPI5.loc[pais]\n",
        "    seriepais=seriepais.loc[1995:2021]\n",
        "    seriepais=pd.DataFrame(seriepais)\n",
        "    seriepais[\"X\"]=range(1, len(seriepais)+1)\n",
        "    reg=LinearRegression()\n",
        "    X = seriepais.X.values.reshape(-1,1)\n",
        "    y = seriepais[pais].values.reshape(-1,1)\n",
        "    reg.fit(X=X, y=y)\n",
        "    alfas[pais] = reg.coef_[0][0]\n",
        "    betas[pais] = reg.intercept_[0]\n",
        "    score[pais] =reg.score(X,y)\n",
        "\n",
        "#Cambio para Japon por el accidente de 2011\n",
        "\n",
        "seriepais=KPI5.loc[\"Japan\"]\n",
        "seriepais=seriepais.loc[2012:2021]\n",
        "seriepais=pd.DataFrame(seriepais)\n",
        "seriepais[\"X\"]=range(1, len(seriepais)+1)\n",
        "reg=LinearRegression()\n",
        "X = seriepais.X.values.reshape(-1,1)\n",
        "y = seriepais[\"Japan\"].values.reshape(-1,1)\n",
        "reg.fit(X=X, y=y)\n",
        "alfas[\"Japan\"] = reg.coef_[0][0]\n",
        "betas[\"Japan\"] = reg.intercept_[0]\n",
        "score[\"Japan\"] =reg.score(X,y)\n",
        "\n",
        "dfalfas=pd.DataFrame(alfas, index=alfas.keys())\n",
        "\n",
        "pendientes=pd.DataFrame(dfalfas.iloc[0])\n",
        "pendientes.rename(columns={\"Argentina\":\"Tendencia\"}, inplace=True)\n",
        "pendientes[\"Tendencia\"] = pendientes[\"Tendencia\"]*100\n",
        "pendientes.sort_values(\"Tendencia\", ascending=False, inplace=True)\n",
        "pendientes[\"Tendencia\"]=round(pendientes[\"Tendencia\"],2)\n",
        "best_5_pendientes = pendientes[0:5]\n",
        "worst_5_pendientes = pendientes[-5:]\n",
        "pendientes_min_medio=int(pendientes.shape[0]/2-2)\n",
        "pendientes_max_medio=int(pendientes.shape[0]/2+3)\n",
        "middle_5_pendientes=pendientes[pendientes_min_medio:pendientes_max_medio]\n",
        "#Peores, gráfico de barras.\n",
        "\n",
        "graf_peores_pendientes=px.bar( data_frame=worst_5_pendientes,\n",
        "                    x=worst_5_pendientes.index, \n",
        "                    y=\"Tendencia\", \n",
        "                    title=\"5 países con menor pendiente en su tendencia lineal\",\n",
        "                    color_discrete_sequence=[\"red\"],\n",
        "                    opacity=0.8,\n",
        "                    labels={'index': 'País', \"Tendencia\": \"Pendiente de la tendencia\"}\n",
        "        )\n",
        "st.write(graf_peores_pendientes)\n",
        "\n",
        "\n",
        "#intermedios, gráfico de barras.\n",
        "\n",
        "graf_middle_pendientes=px.bar( data_frame=middle_5_pendientes,\n",
        "                    x=middle_5_pendientes.index, \n",
        "                    y=\"Tendencia\", \n",
        "                    title=\"5 países intermedios según la pendiente de su línea de tendencia\",\n",
        "                    color_discrete_sequence=[\"blue\"],\n",
        "                    opacity=0.8,\n",
        "                    labels={'index': 'País', \"Tendencia\": \"Pendiente de la tendencia\"}\n",
        "        )\n",
        "st.write(graf_middle_pendientes)\n",
        "\n",
        "\n",
        "#Mejores, gráfico de barras.\n",
        "\n",
        "graf_mejores_pendientes=px.bar( data_frame=best_5_pendientes,\n",
        "                    x=best_5_pendientes.index, \n",
        "                    y=\"Tendencia\", \n",
        "                    title=\"5 países con mayor pendiente en su tendencia lineal\",\n",
        "                    color_discrete_sequence=[\"green\"],\n",
        "                    opacity=0.8,\n",
        "                    labels={'index': 'País', \"Tendencia\": \"Pendiente de la tendencia\"}\n",
        "        )\n",
        "st.write(graf_mejores_pendientes)\n",
        "\n",
        "predicciones=pendientes.merge(FR_Energias_limpias2021,left_index=True, right_on=\"Pais\")\n",
        "predicciones.drop(\"Anio\", axis=1, inplace=True)\n",
        "predicciones.rename(columns={\"Energia_Limpia\":\"2021\"}, inplace=True)\n",
        "listaaños=list(np.arange(2022,2051))\n",
        "for año in listaaños:\n",
        "    predicciones[año]=predicciones[\"2021\"]+(predicciones.Tendencia/100)*(año-2021)\n",
        "    predicciones.loc[ predicciones[año] >1, año] = 1\n",
        "    predicciones.loc[ predicciones[año] <0, año] = 0\n",
        "\n",
        "predicciones.set_index(\"Pais\", inplace=True)\n",
        "\n",
        "#Creacion de mapa de consumo de energías limpias consumo total\n",
        "\n",
        "data2=dict(type = \"choropleth\", \n",
        " locations = predicciones.Codigo_pais, \n",
        " locationmode = \"ISO-3\", \n",
        " z = predicciones[2050])\n",
        "\n",
        "layout2 = dict(title = 'Consumo energía limpia / Consumo total en 2050', title_x=0.5, geo = {'scope':'world'})\n",
        "FR_x2 = go.Figure(data=[data2],\n",
        "layout = layout2)\n",
        "st.write(FR_x2)\n",
        "\n",
        "#GRAFICO IRRADIANZA VS CAPACIDAD INSTALADA solar\n",
        "\n",
        "query1sol= 'SELECT p.\"Pais\", i.\"Irradianza\" FROM \"Irradianza\" i JOIN \"Paises\" p ON (i.\"Id_Pais\" = p.\"Id_Pais\") WHERE i.\"Id_Anio\"=56;'\n",
        "irradianza=pd.read_sql_query(query1sol, con=conexion)\n",
        "query2sol='SELECT p.\"Pais\", es.\"Instalada_solar\" FROM \"Energia_solar\" es JOIN \"Paises\" p ON (es.\"Id_Pais\" = p.\"Id_Pais\") WHERE es.\"Id_anio\"=56;'\n",
        "FR_solar=pd.read_sql_query(query2sol, con=conexion)\n",
        "datossolar=pd.merge(irradianza, FR_solar, on=\"Pais\")\n",
        "st.write(px.scatter(data_frame=datossolar, \n",
        "           x=\"Instalada_solar\", \n",
        "           y=\"Irradianza\", \n",
        "           hover_data=[\"Pais\"], \n",
        "           title=\"Energía solar: irradianza vs capacidad instalada (2021)\", \n",
        "           labels={'Irradianza': 'Irradianza (W/m2)', \"Instalada_solar\": \"Instalada_solar (MW)\"},\n",
        "           color=\"Pais\"))\n",
        "\n",
        "\n",
        "\n",
        "# Machine Learning # Machine Learning # Machine Learning # Machine Learning # Machine Learning\n",
        "\n",
        "import streamlit as st\n",
        "import plotly.express as px\n",
        "import matplotlib.pyplot as plt\n",
        "from sqlalchemy import create_engine\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "import seaborn as sns\n",
        "from sklearn.linear_model import LinearRegression\n",
        "from sklearn import linear_model\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn import metrics\n",
        "import datetime\n",
        "\n",
        "def plot_corre_heatmap(corr):\n",
        "    '''\n",
        "    Definimos una función para ayudarnos a graficar un heatmap de correlación\n",
        "    '''\n",
        "    fig = plt.figure(figsize=(12,10))\n",
        "    sns.heatmap(corr, cbar = True,  square = False, annot=True, fmt= '.2f'\n",
        "                ,annot_kws={'size': 15},cmap= 'coolwarm')\n",
        "    plt.xticks(rotation = 45)\n",
        "    plt.yticks(rotation = 45)\n",
        "    # Arreglamos un pequeño problema de visualización\n",
        "    b, t = plt.ylim() # discover the values for bottom and top\n",
        "    b += 0.5 # Add 0.5 to the bottom\n",
        "    t -= 0.5 # Subtract 0.5 from the top\n",
        "    plt.ylim(b, t) # update the ylim(bottom, top) values\n",
        "    st.pyplot(fig)\n",
        "\n",
        "\n",
        "def listar (lista):\n",
        "    return list(map(lambda x: x[0], lista))\n",
        "\n",
        "\n",
        "\n",
        "st.subheader('MODELO ML')\n",
        "st.markdown(\"# Regresión Lineal para Cálculo de Emisiones de CO2 por País\")\n",
        "conexion = create_engine(\"postgresql://{user}:{pw}@{host}:{port}/{db}\".format(\n",
        "                                    user=\"postgres\",\n",
        "                                    pw=\"postgres\",\n",
        "                                    host=\"database-grupo5.cgmzd7suyc4v.us-east-1.rds.amazonaws.com\",\n",
        "                                    port = \"5432\",\n",
        "                                    db = \"postgres\",\n",
        "                                    echo=False))\n",
        "df_paises_j = pd.read_sql_query('SELECT * FROM \"Paises\"',con=conexion)\n",
        "df_Años_j = pd.read_sql_query('SELECT * FROM \"Años\"',con=conexion)\n",
        "df_emisiones_CO2_j = pd.read_sql_query('SELECT * FROM \"Emisiones_CO2\"',con=conexion)\n",
        "df_poblacion_j = pd.read_sql_query('SELECT * FROM \"Poblacion_Mundo\"',con=conexion)\n",
        "df_consumo_j = pd.read_sql_query('SELECT * FROM \"Energia_total\"',con=conexion)\n",
        "df_renobables_j = pd.read_sql_query('SELECT * FROM \"Energia_renovables\"',con=conexion)\n",
        "df_poblacion_j = df_poblacion_j.rename(columns={'Id_Anio':'Id_anio'})\n",
        "df_poblacion_j = df_poblacion_j.rename(columns={'Id_Anio':'Id_anio'})\n",
        "df = df_emisiones_CO2_j.merge(df_poblacion_j, on=['Id_Pais','Id_anio'], how='left').dropna()\n",
        "df = df.merge(df_consumo_j, on=['Id_Pais','Id_anio'], how='left').dropna()\n",
        "df = df.merge(df_renobables_j, on=['Id_Pais','Id_anio'], how='left').dropna()\n",
        "df = df.merge(df_paises_j, on='Id_Pais', how='left')\n",
        "df = df.merge(df_Años_j, on='Id_anio', how='left')\n",
        "df = df.drop(columns=['ID_Emisiones_CO2','Id_Pais','Id_anio','Id_Poblacion','ID_consumototal','ID_Energia_renovables','Codigo_pais','Produccion_renovables'])\n",
        "df = df.reindex(columns=['Pais','Anio','Poblacion','Emisiones_CO2','Consumo_renovables','Consumo_total'])\n",
        "df['Poblacion'] = df['Poblacion'].astype(int)\n",
        "year = datetime.date.today().strftime(\"%Y\")\n",
        "anios = [i for i in range(int(year),2101)]\n",
        "filter_pais = st.selectbox(\"Selecciona un país\", np.sort(pd.unique(df[\"Pais\"])))\n",
        "pais = filter_pais\n",
        "df1 = df[df['Pais']== pais]\n",
        "x = df1['Anio']\n",
        "y1 = df1['Emisiones_CO2']\n",
        "y2 = df1['Poblacion']\n",
        "y3 = df1['Consumo_renovables']\n",
        "y4 = df1['Consumo_total']\n",
        "fig, ax = plt.subplots(4, figsize=(15, 15))\n",
        "ax[0].plot(x, y1)\n",
        "ax[0].set(ylabel='Emisiones (Mt)', title='Emisiones CO2')\n",
        "ax[1].plot(x, y2)\n",
        "ax[1].set(ylabel='Población (M)', title='Población')\n",
        "ax[2].plot(x, y3)\n",
        "ax[2].set(ylabel='Consumo renovables (EJ)', title='Consumo Energías Renovables')\n",
        "ax[3].plot(x, y4)\n",
        "ax[3].set(xlabel= 'Año', ylabel='Consumo total (EJ)', title='Consumo Total')\n",
        "st.pyplot(fig)\n",
        "corr = df1.corr()\n",
        "plot_corre_heatmap(corr)\n",
        "filter_anio = st.selectbox(\"Selecciona un año\", np.sort(pd.unique(anios)))\n",
        "anio = filter_anio\n",
        "X = df1['Anio'].values\n",
        "y = df1['Emisiones_CO2'].values\n",
        "X = X.reshape(-1,1)\n",
        "y = y.reshape(-1,1)\n",
        "model = LinearRegression(fit_intercept=True)\n",
        "model.fit(X, y)\n",
        "X_pred = np.arange(df1.Anio.max() + 1, df1.Anio.max() + (anio - df1.Anio.max() + 1)).reshape(-1,1)\n",
        "y_pred = model.predict(X_pred)\n",
        "max_value = df1[df1.Anio == df1.Anio.max()].Emisiones_CO2.values\n",
        "coef = 0.92 #El KPI requiere que se reduzcan un 8% de las emisiones anuales\n",
        "co2 = [coef*max_value]\n",
        "for i in range(len(y_pred)-1):\n",
        "    co2.append(coef*co2[i-1])\n",
        "x =  listar(X_pred.tolist())\n",
        "y1 = listar(y_pred.tolist())\n",
        "y2 = listar([i.tolist() for i in co2])\n",
        "st.write(f'Las emisiones de {pais} esperadas para el año {x[-1]} son de {int(y1[-1])} Mt de CO2')\n",
        "st.write(f'Las emisiones de {pais} esperadas para el año {x[-1]} son de {int(y2[-1])} Mt de CO2 en caso de reducir un 8% anual')\n",
        "x = ['Predicción','Reduciendo Emisiones']\n",
        "y = [y1[-1], y2[-1]]\n",
        "fig = plt.figure(figsize=(6, 3))\n",
        "ax = fig.add_axes([0,0,1,1])\n",
        "ax.bar(x,y)\n",
        "ax.set_title('Emisiones de CO2 (Mt)')\n",
        "st.write(fig)\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "mAoc_XDq80qN",
        "outputId": "481d207b-9c55-410f-dc97-cadb5e2be4f6"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Overwriting app.py\n"
          ]
        }
      ]
    }
  ]
}